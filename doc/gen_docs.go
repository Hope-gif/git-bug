package main

import (
	"fmt"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"

	"github.com/go-errors/errors"
	"github.com/spf13/cobra/doc"

	"github.com/MichaelMure/git-bug/bridge"
	"github.com/MichaelMure/git-bug/commands"
)

const bridgeExampleFilePath = "commands/bridge_configure_doc.go"

func main() {
	fmt.Println("Generating documentation ...")

	tasks := map[string]func() error{
		"BridgeConfig": genBridgeConfig,
		"ManPage":      genManPage,
		"Markdown":     genMarkdown,
	}

	// Due to concurrency issues in cobra, the following can't be concurrent :(

	// var wg sync.WaitGroup
	for name, f := range tasks {
		// wg.Add(1)
		// go func(name string, f func() error) {
		// 	defer wg.Done()
		err := f()
		if err != nil {
			fmt.Printf("  - %s: %v\n", name, err)
			return
		}
		fmt.Printf("  - %s: ok\n", name)
		// }(name, f)
	}

	// wg.Wait()
}

func genBridgeConfig() error {
	var exampleText strings.Builder
	exampleText.WriteString("`")
	exampleText.WriteString(`# Interactive example
[1]: github
[2]: gitlab
[3]: jira
[4]: launchpad-preview

target: 1
name [default]: default

Detected projects:
[1]: github.com/a-hilaly/git-bug
[2]: github.com/MichaelMure/git-bug

[0]: Another project

Select option: 1

[1]: user provided token
[2]: interactive token creation
Select option: 1

You can generate a new token by visiting https://github.com/settings/tokens.
Choose 'Generate new token' and set the necessary access scope for your repository.

The access scope depend on the type of repository.
Public:
	- 'public_repo': to be able to read public repositories
Private:
	- 'repo'       : to be able to read private repositories

Enter token: 87cf5c03b64029f18ea5f9ca5679daa08ccbd700
Successfully configured bridge: default

`)
	targets := bridge.Targets()
	for i, b := range targets {
		if i != 0 {
			_, err := exampleText.WriteString("\n\n")
			if err != nil {
				return err
			}
		}
		_, err := fmt.Fprintf(&exampleText, "# For %s\ngit bug bridge configure \\\n", strings.Title(strings.Split(b, ".")[0]))
		if err != nil {
			return err
		}
		params, err := bridge.ValidParams(b)
		if err != nil {
			return errors.WrapPrefix(err, "bridge parameters", 0)
		}
		for _, param := range params {
			_, err = fmt.Fprintf(&exampleText, "    --%s=PLACEHOLDERTEXT \\\n", param)
			if err != nil {
				return err
			}
		}
	}
	exampleText.WriteString("`")

	_ = os.Remove(bridgeExampleFilePath)

	f, err := os.Create(bridgeExampleFilePath)
	if err != nil {
		return err
	}
	defer f.Close()

	_, err = f.WriteString(`// Code generated by doc/gen_docs.go; DO NOT EDIT.

package commands

var bridgeConfigureExample =`)
	if err != nil {
		return err
	}
	_, err = f.WriteString(exampleText.String())
	if err != nil {
		return err
	}

	return nil
}

func genManPage() error {
	cwd, _ := os.Getwd()
	dir := path.Join(cwd, "doc", "man")

	date := time.Date(2019, 4, 1, 12, 0, 0, 0, time.UTC)

	header := &doc.GenManHeader{
		Title:   "GIT-BUG",
		Section: "1",
		Date:    &date,
		Source:  "Generated from git-bug's source code",
	}

	files, err := filepath.Glob(dir + "/*.1")
	if err != nil {
		return err
	}
	for _, f := range files {
		if err := os.Remove(f); err != nil {
			return err
		}
	}

	return doc.GenManTree(commands.NewRootCommand(), header, dir)
}

func genMarkdown() error {
	cwd, _ := os.Getwd()
	dir := path.Join(cwd, "doc", "md")

	files, err := filepath.Glob(dir + "/*.md")
	if err != nil {
		return err
	}
	for _, f := range files {
		if err := os.Remove(f); err != nil {
			return err
		}
	}

	return doc.GenMarkdownTree(commands.NewRootCommand(), dir)
}
